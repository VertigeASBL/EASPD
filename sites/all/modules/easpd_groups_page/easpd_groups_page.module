<?php

/*=========*/
/* SUMMARY */
/*=========*/

/**
 * - Hooks
 * - Views
 * - Get content
 * - Permission helpers
 */

/*********
 * Hooks *
 *********/

/**
 * implements hook_menu
 *
 * Creates a "groups" page
 */
function easpd_groups_page_menu () {

    if ($groups = get_groups()) {
        $items['groups'] = array(
            'title'            => t('Groups'),
            'type'             => MENU_NORMAL_ITEM,
            'menu_name'        => 'user-menu',
            'tab_parent'       => '',
            'expanded'         => TRUE,
            'page callback'    => 'easpd_groups_page_view',
            'access callback'  => 'easpd_groups_page_access',
        );
        foreach ($groups as $gid => $group) {
            $items['groups/'.$gid] = array(
                'title'            => $group->title,
                'type'             => MENU_NORMAL_ITEM,
                'menu_name'        => 'user-menu',
                'page callback'    => 'easpd_group_page_view',
                'page arguments'   => array($group),
                'access callback'  => 'node_access',
                'access arguments' => array('view', $group),
            );
        }
    }

    return $items;
}

/**
 * implements hook_theme
 *
 */
function easpd_groups_page_theme () {

  return array(
    'easpd_groups_page' => array(
      'template' => 'easpd_groups_page',
      'variables' => array(
        'groups' => NULL,
      ),
    ),
  );
}

/**
 * implements hook_node_grants
 *
 */
function easpd_groups_page_node_grants ($account, $op) {

  $groups = get_groups();
  $allowed_group_nids = array();

  foreach ($groups as $group) {
    if (user_is_in_group($account, $group)) {
      $allowed_group_nids[] = $group->nid;
    }
  }

  $granted_content = $allowed_group_nids;
  foreach ($allowed_group_nids as $nid) {
    $granted_content = array_merge($granted_content,
                                   get_group_contents($nid));
  }

  return array('easpd_groups_realm' => $granted_content);
}

/**
 * implements hook_node_access_records
 *
 */
function easpd_groups_page_node_access_records ($node) {

  $grants   = array();

  if (in_array($node->type, array('group', 'group_content'))) {
    $grants[] = array(
                      'realm'        => 'easpd_groups_realm',
                      'gid'          => $node->nid,
                      'grant_view'   => $node->status,
                      'grant_update' => 0,
                      'grant_delete' => 0,
                      'priority'     => 1,
                      );
  }

  return $grants;
}

/*********
 * Views *
 *********/

/**
 * hook_menu's page callback
 *
 * Renders the "groups" page
 */
function easpd_groups_page_view () {

  // handy variables
  global $base_url;
  global $user;
  $module_path = drupal_get_path('module', 'easpd_map');

  $groups = get_groups();

  foreach ($groups as $gid => $group) {
    $group->og_contents = get_group_contents($gid);
  }

  $allowed_groups = array();
  foreach ($groups as $group) {
    if (node_access('view', $group, $user)) {
      $allowed_groups[] = $group;
    }
  }

  // Build page
  drupal_set_title(t("Your groups"));

  $build['default_message'] = array(
    '#markup' => theme('easpd_groups_page',
                       array(
                         'groups' => $allowed_groups,
                       )),
  );
  return $build;
}

/**
 * hook_menu's access callback
 *
 * Check access for the "groups" page
 */
function easpd_groups_page_access ($user) {

  global $user;

  $groups = get_groups();

  foreach ($groups as $group) {
    if (node_access('view', $group, $user)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * hook_menu's page callback
 *
 * Renders the "groups/%node" pages
 */
function easpd_group_page_view ($node) {

    drupal_goto('node/' . $node->nid);
}

/***************
 * Get content *
 ***************/

/**
 * returns an array of node objects containing all the defined Groups.
 * doesn't check permissions.
 */
function get_groups () {

  // SQL query
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('n.type', 'group')
    ->orderBy('n.title', 'ASC');

  $nids  = $select->execute()->fetchCol();
  $nodes = node_load_multiple($nids);

  return $nodes;
}

/**
 * returns an array of node objects belonging to the given group
 * doesn't check permissions.
 */
function get_group_contents ($group_nid) {

  // SQL query
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('n.type', 'group_content')
    ->orderBy('n.title', 'ASC');

  $nids  = $select->execute()->fetchCol();
  $nodes = node_load_multiple($nids);

  if ($group_nid) {
    $filtered = array();
    foreach ($nodes as $nid => $node) {
      if ($group_nid === intval($node->og_group_ref['und'][0]['target_id'], 10)) {
        $filtered[$nid] = $node;
      }
    }
    $nodes = $filtered;
  }

  return $nodes;
}

/**
 * Gets the group id(s) of the group(s) containing the given node
 */
function get_gids ($node) {

    $gids = array();
    if ($node->type === 'group_content') {
        // find parent groups
        $select = db_select('og_membership', 'm')
            ->fields('m', array('gid'))
            ->condition('m.entity_type', 'node')
            ->condition('m.etid', $node->nid);

        $gids  = $select->execute()->fetchCol();
    } else if ($node->type === 'group') {
        $gids = array($node->nid);
    }
    return $gids;
}

/**********************
 * Permission helpers *
 *********************/

function user_is_in_group ($account, $node) {

    $group_ids = get_gids($node);

    $select = db_select('og_membership', 'm')
        ->fields('m', array('etid'))
        ->condition('m.entity_type', 'user')
        ->condition('m.etid', $account->uid)
        ->condition('m.gid', $group_ids);

    if (count($select->execute()->fetchCol()) > 0) {
        return TRUE;
    } else {
        return FALSE;
    }
}

function is_write_access ($op) {

    return in_array($op, array('create', 'delete', 'update'));
}

function is_group_admin ($account, $node) {

    $admin_role_id = 1;
    $group_ids = get_gids($node);

    $select = db_select('og_users_roles', 'ur')
        ->fields('ur', array('rid'))
        ->condition('ur.gid', $group_ids)
        ->condition('ur.uid', $account->uid);

    if (in_array($admin_role_id, $select->execute()->fetchCol())) {
        return TRUE;
    } else {
        return FALSE;
    }
}